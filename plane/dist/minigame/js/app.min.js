/*Sat, 24 Feb 2018 04:11:26 GMT*/
/**
 * @author zhy
 * @datetime 2018-01-05
 */
var Sound = function () {
    var me = this;
    me.isPause = false;
    me.list = {};

    if (arguments[0] instanceof Array) {
        me.loadList(arguments[0]);
    }
};

Sound.prototype.loadList = function (list) {
    var me = this;
    for (var i = 0, item; item = list[i]; i++) {
        if (item.src.indexOf(".mp3") > -1) {
            me.list[item.key] = item.entity;
        }
    }
};

Sound.prototype.play = function (key, isLoop) {
    var me = this;
    var a = me.list[key];
    if (typeof a === "undefined") return;
    a.loop = !!isLoop;
    try {
        a.currentTime = 0;
    } catch (ex) { }
    a.play();
};

Sound.prototype.playAll = function () {
    var me = this;
    for (var key in me.list) {
        me.list[key].play();
    }
};

Sound.prototype.pause = function () {
    var me = this;
    me.isPause = true;
    for (var key in me.list) {
        me.list[key].pause();
    }
};

Sound.prototype.continue = function () {
    var me = this;
    me.isPause = false;
    for (var key in me.list) {
        me.list[key].play();
    }
};

Sound.prototype.stop = function () {
    var me = this;
    for (var key in me.list) {
        var a = me.list[key];
        a.pause();
        a.currentTime = 0;
    }
};

Sound.prototype.fixIOSCantPlay = function () {
    var me = this;
    me.playAll();
    me.stop();
};

Sound.prototype.arraybufferToBase64 = function (arraybuffer) {
    var me = this;
    return URL.createObjectURL(new Blob([new Uint8Array(arraybuffer)], { type: "audio/mpeg" }));
};
/**
 * @author   : zhy
 * @datetime : 2017-12-27
 * @file IEventObject.js
 */

/**
 * @interface IEventObject
 */
var IEventObject = function () { };

/**
 * @method addEventListener
 * @param {string} type 
 * @param {function} listener 
 * @link https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener
 */
IEventObject.prototype.addEventListener = function (type, listener) { throw new Error("not implement"); };

/**
 * @method removeEventListener
 * @param {string} type 
 * @param {function} listener 
 * @link https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener
 */
IEventObject.prototype.removeEventListener = function (type,listener) { throw new Error("not implement"); };

/**
 * @method dispatchEvent
 * @param {string} type 
 * @param {object} event 
 * @link https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent
 */
IEventObject.prototype.dispatchEvent = function (type, event) { throw new Error("not implement"); };
/**
 * @author   : zhy
 * @datetime : 2017-12-27
 * @file AEventObject.js
 */

var AEventObject = function () {
    IEventObject.apply(this, arguments);
    this.listeners = [];
};

//@implement IEventObject
AEventObject.prototype = Object.create(IEventObject.prototype);

/**
 * @override addEventListener
 * @method addEventListener
 * @param {string} type 
 * @param {function} listener
 */
AEventObject.prototype.addEventListener = function (type, listener) {
    var me = this;
    me.listeners.push({
        type: type,
        listeners: listener
    });
};

/**
 * @override removeEventListener
 * @method removeEventListener
 * @param {string|funtion} type 
 * @param {function} listener 
 */
AEventObject.prototype.removeEventListener = function (type, listener) {
    var me = this;
    var lsn = arguments[1];
    var removeList = [];
    if (typeof arguments[0] === "function") lsn = type;

    for (var i = 0, item; item = me.listeners[i]; i++) {
        var removeItem = null;
        if (typeof arguments[0] === "string" && typeof arguments[1] === "function") {
            removeItem = item;
        }
        else if (typeof arguments[0] === "function") {
            removeItem = item;
        }

        if (removeItem) {
            removeList.push(removeItem);
        }
    }

    for (var i = 0, item; item = removeList[i]; i++) {
        me.listeners.splice(me.listeners.indexOf(item), 1);
    }
};

/**
 * @override dispatchEvent
 * @method dispatchEvent
 * @param {string} type 
 * @param {object} event 
 */
AEventObject.prototype.dispatchEvent = function (type, event) {
    var me = this;
    for (var i = 0, item; item = me.listeners[i]; i++) {
        if (item.type === type) {
            item.listeners(event);
        }
    }
};
/**
 * @author   : zhy
 * @datetime : 2018-01-02
 * @description image audio video manager
 */

var Resource = function () {
    AEventObject.apply(this, arguments);
    this.list = [];
    this.isComplete = false;
    this._loaded = 0;
    if (arguments[0] instanceof Object) {
        Object.assign(this, arguments[0]);
    }
};
Resource.prototype = Object.create(AEventObject.prototype);

Resource.prototype.ajax = function (options) {
    var me = this;
    var xhr = new XMLHttpRequest();
    var settings = Object.assign({
        url: "",
        method: "GET",
        body: null,
        onLoad: function (xhr) {

        },
        onError: function (xhr) {

        },
        onComplete: function (xhr) {

        }
    }, options);

    xhr.addEventListener("load", function (evt) {
        settings.onLoad(this);
    });
    xhr.addEventListener("error", function (evt) {
        settings.onError(this);
    });
    xhr.addEventListener("complete", function (evt) {
        settings.onComplete(this);
    });
    xhr.open(settings.method, settings.url);
    xhr.responseType = "arraybuffer";
    xhr.send(settings.body);
};

Resource.prototype.httpGet = function (url, fnOnLoad) {
    var me = this;
    me.ajax({
        url: url,
        method: "GET",
        onLoad: fnOnLoad
    });
};

Resource.prototype.httpPost = function (url, body, fnOnLoad) {
    var me = this;
    me.ajax({
        url: url,
        method: "POST",
        body: body,
        onLoad: fnOnLoad
    });
};

Resource.prototype.httpPut = function (url, body, fnOnLoad) {
    var me = this;
    me.ajax({
        url: url,
        method: "PUT",
        body: body,
        fnOnLoad: fnOnLoad
    });
};

Resource.prototype.httpDelete = function (url, fnOnload) {
    var me = this;
    me.ajax({
        url: url,
        method: "DELETE",
        fnOnLoad: fnOnLoad
    });
};

Resource.prototype.loadAll = function () {
    var me = this;
    for (var i = 0, item; item = me.list[i]; i++) {
        me.load(item);
    }
};

Resource.prototype.load = function (key) {
    var me = this;
    var item = null;
    if (key instanceof String) {
        item = me.get(key);
    }
    else if (key instanceof Object) {
        item = key;
    }

    if (item) {
        if (item.src.indexOf(".png") > -1) {
            var img = new Image();
            img.addEventListener("load", function (evt) {
                me.waitLoad();
            });
            img.src = item.src;
            item.entity = img;
        }

        if (item.src.indexOf(".mp3") > -1) {
            var a = new Audio();
            a.addEventListener("canplay", function (evt) {

            });
            a.src = item.src;
            item.entity = a;
            me.waitLoad();
        }
    }
};

Resource.prototype.waitLoad = function () {
    var me = this;
    if (++me._loaded === me.list.length) {
        me.isComplete = true;
        me.dispatchEvent("complete", { target: me });
    }
};

Resource.prototype.add = function (key, src) {
    var me = this;
    var r = me.get(key);
    if (!r) {
        var item = { key: key, src: src, binary: [], contentType: "" };
        me.list.push(item);
        me.load(item);
    }
};

Resource.prototype.get = function (key) {
    var me = this;
    for (var i = 0, item; item = me.list[i]; i++) {
        if (item.key === key) {
            return item;
        }
    }
    return null;
};

Resource.prototype.getBase64 = function (key) {
    var me = this;
    var o = me.get(key);
    if (o) return me.arrayBufferToBase64(o.binary, o.contentType);
    return null;
};

Resource.prototype.remove = function (key) {
    var me = this;
    me.list.splice(me.list.indexOf(me.get(key)), 1);
};

Resource.prototype.arrayBufferToBase64 = function (arraybuffer, type) {
    return URL.createObjectURL(new Blob([new Uint8Array(arraybuffer)], { type: type }));
};

/**
 * @author zhy
 * @datetime 20180108
 */
var DataBus = function () {
    this.scale = 1;
    this.sound = new Sound();
    this.resource = new Resource();
    this.list = [];
    this.removeList = [];
};
DataBus.prototype.add = function (o) {
    this.list.push(o);
};

DataBus.prototype.remove = function (o) {
    this.removeList.push(o);
};

DataBus.prototype.execRemove = function (o) {
    for (var i = 0, item; item = this.removeList[i]; i++) {
        var index = this.list.indexOf(item);
        if (index > -1) {
            this.list.splice(index, 1);
        }
    }
};

DataBus.prototype.broadcast = function (eventName, eventObject) {
    for (var i = 0, item; item = this.list[i]; i++) {
        item.dispacthEvent(eventName, eventObject);
    }
};
var dataBus = new DataBus();
/**
 * @author   : zhy
 * @datetime : 2017-12-27
 * @file AModel.js
 */

var AModel = function () {
    AEventObject.apply(this, arguments);
    var me = this;
    me.width = 0;
    me.height = 0;
    me.position = {
        x: 0,
        y: 0
    };
    me.sWidth = 0;
    me.sHeight = 0;
    me.sPosition = {
        x: 0,
        y: 0
    };
    me.rotate = 0;
    me.scale = 1;
    me.speed = 0;
    me.image = null;

    if (typeof arguments[0] === "object") {
        for (var p in arguments[0]) {
            me[p] = arguments[0][p];
        }
    }
};

/**
 * @implement AEventObject
 */
AModel.prototype = Object.create(AEventObject.prototype);

/**
 * @method getBox
 * @return {object}
 */
AModel.prototype.getBox = function () {
    var me = this;
    return {
        leftTop: me.position,
        rightTop: {
            x: me.position.x + me.width,
            y: me.position.y
        },
        rightBottom: {
            x: me.position.x + me.width,
            y: me.position.y + me.height
        },
        leftBottom: {
            x: me.position.x,
            y: me.position.y + me.height
        }
    };
};

AModel.prototype.inBox = function (point) {
    var me = this;
    if (point.x >= me.position.x &&
        point.x <= me.position.x + me.width &&
        point.y >= me.position.y &&
        point.y <= me.position.y + me.height
    ) return true;
    return false;
};

/**
 * @method getCenter
 * @return {object}
 */
AModel.prototype.getCenter = function () {
    var me = this;
    return {
        x: me.position.x + me.width / 2,
        y: me.position.y + me.height / 2,
    };
};

AModel.prototype.onFrame = function (evt) {
    var me = this;

    var o = me.getCollision(me);
    if (o) {
        me.dispatchEvent("collision", { target: o });
        o.dispatchEvent("collision", { target: me });
    }
};

AModel.prototype.getCollision = function (o) {
    var me = this;
    for (var i = 0, item; item = dataBus.list[i]; i++) {
        if (item instanceof Background) continue;
        if (item === o) continue;
        if (me.isEgdeCollision(item, o)) return item;
    }
    return null;
};

AModel.prototype.isEgdeCollision = function (rect1, rect2) {
    if (rect1.position.x < rect2.position.x + rect2.width &&
        rect1.position.x + rect1.width > rect2.position.x &&
        rect1.position.y < rect2.position.y + rect2.height &&
        rect1.height + rect1.position.y > rect2.position.y) {
        return true;
    } else {
        return false;
    }
};

var ABullet = function () {
    AModel.apply(this, arguments);
    var me = this;

    dataBus.sound.play("bullet");
    me.addEventListener("frame", function (evt) { me.onFrame(evt); });
    me.addEventListener("collision", function (evt) { me.onCollision(evt); });
};

ABullet.prototype = Object.create(AModel.prototype);

ABullet.prototype.onFrame = function (evt) {
    var me = this;
    me.position.y -= me.speed;
    AModel.prototype.onFrame.apply(this, arguments);

    if (me.position.y + me.height < 0) {
        dataBus.remove(me);
    }
};

ABullet.prototype.onCollision = function (evt) {
    var me = this;
    if (me.owner !== evt.target && evt.target instanceof AEnemy) {
        dataBus.remove(me);
    }
};
/**
 * @author : zhy
 * @date   : 20171108
 * @file Background.js
 */

var Background = function () {
    AModel.apply(this, arguments);
    var me = this;
    me.image = dataBus.resource.get("bg").entity;
    me.width = 640;
    me.height = 1136;
    me.sWidth = me.width
    me.sHeight = me.height;
    me.name = "Background";
    me.resize();
    me.addEventListener("frame", function (evt) { me.onFrame(evt); });
};

Background.prototype = Object.create(AModel.prototype);

Background.prototype.resize = function () {
    var me = this;
    var ratio = me.height / me.width;
    me.width = me.windowWidth;
    me.height = me.windowWidth * ratio;
};

Background.prototype.onFrame = function () {
    var me = this;
    me.position.y += 0.1;
    if (me.position.y >= me.windowHeight) {
        me.position.y = me.windowHeight - me.height - me.height;
    }
};
var Face = function (options) {
    AModel.apply(this, arguments);
    var me = this;
    me.image = dataBus.resource.get("face").entity;
    me.width = 640;
    me.height = 1136;
    me.sWidth = 640
    me.sHeight = 1136;
};
Face.prototype = Object.create(AModel.prototype);
var Dialog = function (options) {
    AModel.apply(this, arguments);
    var me = this;
    me.image = dataBus.resource.get("common").entity;
    me.width = 200;
    me.height = 200;
    me.sWidth = 200
    me.sHeight = 200;
};
Dialog.prototype = Object.create(AModel.prototype);
var Button = function (options) {
    AModel.apply(this, arguments);
    var me = this;
    me.image = dataBus.resource.get("common").entity;
    me.width = 79;
    me.height = 20;
    me.sWidth = 83
    me.sHeight = 21;
    me.sPosition = {
        x: 201,
        y: 0
    };
};
Button.prototype = Object.create(AModel.prototype);

Button.prototype.onAfterFrame = function (evt) {
    var me = this;
    var ctx = evt.target.context;
    var fontSize = me.height / 2;
    var wordwidth = me.text.length * fontSize;
    ctx.save();
    ctx.font = fontSize + "px Arial";
    ctx.fillText(me.text, me.position.x + (me.width - wordwidth) / 2, me.position.y + (me.height + fontSize/2) / 2);
    ctx.restore();
};
/**
 * @author:zhy
 * @date:20171108
 */
var Bullet1 = function (options) {
    ABullet.apply(this, arguments);
    var me = this;
    me.image = dataBus.resource.get("bullet1").entity;
    me.width = 13 * dataBus.scale;
    me.height = 28 * dataBus.scale;
    me.sWidth = 13
    me.sHeight = 28;
    me.speed = 10;
    me.name = "Bullet1";
};

Bullet1.prototype = Object.create(ABullet.prototype);
/**
 * @author:zhy
 * @date:20171108
 */
var Bullet2 = function (options) {
    ABullet.apply(this, arguments);
    var me = this;
    me.image = dataBus.resource.get("bullet2").entity;
    me.width = 13 * dataBus.scale;
    me.height = 28 * dataBus.scale;
    me.sWidth = 13
    me.sHeight = 28;
    me.speed = 10;
    me.name = "Bullet2";
};

Bullet2.prototype = Object.create(ABullet.prototype);

/**
 * @author   : zhy
 * @date     : 20171108
 */

/**
 * @constructor
 * @param {object} options 
 */
var Plane = function (options) {
    AModel.apply(this, arguments);
    var me = this;
    me.image = dataBus.resource.get("plane").entity;
    me.width = 128 * dataBus.scale;
    me.height = 166 * dataBus.scale;
    me.sWidth = 128;
    me.sHeight = 166;
    me.bulletType = 1;
    me.speed = 3;
    me.hp = 1;
    me.name = "plane";
    me.bombs = 0;
    me.lastAnimation = Date.now();
    me.explodeAnimationTotal = 5;
    me.firedTime = 0;
    me.bombTime = 0;
    me.addEventListener("collision", function (evt) {
        if (evt.target instanceof AEnemy) {
            if (me.hp > 0) {
                --me.hp;
                if (me.hp === 0) {
                    me.sPosition.y = me.sHeight * 2;
                }
            }
        }
        else if (evt.target instanceof DoubleLaser) {
            dataBus.sound.play("getdoublelaser");
            if (me.bulletType === 1) {
                me.bulletType = 2;
            }
            else {
                me.bulletType = 1;
            }
            dataBus.remove(evt.target);
        }
        else if (evt.target instanceof Bomb) {
            if (me.bombs < 9) {
                dataBus.sound.play("getbomb");
                me.bombs++;
                dataBus.remove(evt.target);
            }
        }
    });
};

Plane.prototype = Object.create(AModel.prototype);


Plane.prototype.fire = function () {
    var me = this;
    if ((Date.now() - me.firedTime) < 0.2 * 1000) return [];
    me.firedTime = Date.now();

    if (me.bulletType === 1) {
        var p = me.getCenter();
        p.y = me.position.y;
        var b = new Bullet1({ position: p, owner: me });
        b.position.x -= b.width / 2;
        return [b];
    }

    var b1 = new Bullet2({ position: { x: me.position.x, y: me.position.y + me.height / 2 }, owner: me });
    var b2 = new Bullet2({ position: { x: me.position.x + me.width, y: me.position.y + me.height / 2 }, owner: me });

    b1.position.x -= b1.width / 2;
    b2.position.x -= b2.width / 2;

    return [b1, b2];
};

Plane.prototype.dropBomb = function () {
    var me = this;
    if ((Date.now() - me.bombTime) < 0.2 * 1000 || me.bombs === 0) return;
    me.dispatchEvent("dropBomb", { target: me });
    dataBus.sound.play("usebomb");
    me.bombs--;
    me.bombTime = Date.now();
};

/**
 * @override
 */
Plane.prototype.onFrame = function (evt) {
    var me = this;
    if (me.hp > 0) {
        me.normalAnimation();
    }
    if (me.hp === 0) {
        me.explodeAnimation();
    }
    AModel.prototype.onFrame.apply(this, arguments);//call base onFrame
};

Plane.prototype.normalAnimation = function () {
    var me = this;
    if (Date.now() - me.lastAnimation > 0.5 * 1000) {
        if (me.sPosition.y === 0) {
            me.sPosition.y = me.sHeight;
        }
        else {
            me.sPosition.y = 0;
        }
        me.lastAnimation = Date.now();
    }
};

Plane.prototype.explodeAnimation = function () {
    var me = this;
    if (Date.now() - me.lastAnimation > 0.1 * 1000) {

        if (me.sPosition.y === 2 * me.sHeight) dataBus.sound.play("gameover");

        if (me.sPosition.y === me.explodeAnimationTotal * me.sHeight) {
            me.onExplode();
            return;
        }
        me.sPosition.y += me.sHeight;
        me.lastAnimation = Date.now();
    }
};

Plane.prototype.onExplode = function () {
    var me = this;
    me.dispatchEvent("explode");
};
var AEnemy = function () {
    AModel.apply(this, arguments);
};

AEnemy.prototype = Object.create(AModel.prototype);
/**
 * @author:zhy
 * @date:20171108
 */

var Enemy1 = function (options) {
    AEnemy.apply(this, arguments);
    var me = this;
    me.image = dataBus.resource.get("enemy1").entity;
    me.width = 63 * dataBus.scale;
    me.height = 50 * dataBus.scale;
    me.sWidth = 63;
    me.sHeight = 50;
    me.rotate = 180;
    me.speed = 3;
    me.name = "Enemy1";
    me.hp = 1;
    me.explodeAnimationTotal = 4;
    me.lastAnimation = 0;

    me.addEventListener("collision", function (evt) {
        if (evt.target instanceof ABullet) {
            if (me.hp > 0) {
                --me.hp;
            }
        }
    });
};

Enemy1.prototype = Object.create(AEnemy.prototype);

/**
 * @override
 * @param {number} time 
 */
Enemy1.prototype.onFrame = function (time) {
    var me = this;

    if (me.hp > 0) {
        me.position.y += me.speed;
    }

    if (me.position.y > 1136) {
        dataBus.remove(me);
    }


    if (me.hp === 0) {
        me.explodeAnimation();
    }

    AEnemy.prototype.onFrame.apply(this, arguments);//call base onFrame
};

Enemy1.prototype.explodeAnimation = function () {
    var me = this;
    if (me.sPosition.y === me.sHeight) {
        dataBus.sound.play("enemy1down");
    }
    if (Date.now() - me.lastAnimation > 0.1 * 1000) {
        if (me.sPosition.y === me.explodeAnimationTotal * me.sHeight) {
            me.onExplode();
            return;
        }
        me.sPosition.y += me.sHeight;
        me.lastAnimation = Date.now();
    }
};

Enemy1.prototype.onExplode = function () {
    var me = this;
    me.dispatchEvent("explode");
    dataBus.remove(me);
};
/**
 * @author:zhy
 * @date:20171108
 */

var Enemy2 = function (options) {
    AEnemy.apply(this, arguments);
    var me = this;
    me.image = dataBus.resource.get("enemy2").entity;
    me.width = 90 * dataBus.scale;
    me.height = 115 * dataBus.scale;
    me.sWidth = 90;
    me.sHeight = 115;
    me.rotate = 180;
    me.speed = 3;
    me.name = "Enemy2";
    me.hp = 3;
    me.explodeAnimationTotal = 5;
    me.lastAnimation = 0;//timestamp

    me.addEventListener("collision", function (evt) {
        if (evt.target instanceof ABullet) {
            if (me.hp > 0) {
                --me.hp;
            }
        }
    });
};

Enemy2.prototype = Object.create(AEnemy.prototype);

/**
 * @override
 * @param {number} time 
 */
Enemy2.prototype.onFrame = function (time) {
    var me = this;

    if (me.hp > 0) {
        me.position.y += me.speed;
    }

    if (me.position.y > 1136) {
        dataBus.remove(me);
    }

    if (me.hp === 2) {
        me.damageAnimation();
    }

    if (me.hp === 0) {
        me.explodeAnimation();
    }

    AEnemy.prototype.onFrame.apply(this, arguments);//call base onFrame
};

Enemy2.prototype.damageAnimation = function () {
    var me = this;
    me.sPosition.y = me.sHeight;
};

Enemy2.prototype.explodeAnimation = function () {
    var me = this;
    if (me.sPosition.y === 2 * me.sHeight) { dataBus.sound.play("enemy3down"); }
    if (Date.now() - me.lastAnimation > 0.1 * 1000) {
        if (me.sPosition.y === me.explodeAnimationTotal * me.sHeight) {
            me.onExplode();
            return;
        }
        me.sPosition.y += me.sHeight;
        me.lastAnimation = Date.now();
    }
};

Enemy2.prototype.onExplode = function () {
    var me = this;
    me.dispatchEvent("explode");
    dataBus.remove(me);
};
/**
 * @author:zhy
 * @date:20171108
 */

var Enemy3 = function (options) {
    AEnemy.apply(this, arguments);
    var me = this;
    me.image = dataBus.resource.get("enemy3").entity;
    me.width = 218 * dataBus.scale;
    me.height = 330 * dataBus.scale;
    me.sWidth = 218;
    me.sHeight = 330;
    me.rotate = 180;
    me.speed = 3;
    me.name = "Enemy3";
    me.hp = 5;
    me.explodeAnimationTotal = 6;
    me.normalAnimationTotal = 1;
    me.lastAnimation = 0;//timestamp

    dataBus.sound.play("enemy2out");

    me.addEventListener("collision", function (evt) {
        if (evt.target instanceof ABullet) {
            if (me.hp > 0) {
                --me.hp;
            }
        }
    });
};

Enemy3.prototype = Object.create(AEnemy.prototype);

/**
 * @override
 * @param {number} time 
 */
Enemy3.prototype.onFrame = function (time) {
    var me = this;

    if (me.hp > 0) {
        me.position.y += me.speed;
    }

    if (me.position.y > 1136) {
        dataBus.remove(me);
    }

    if (me.hp > 3) {
        me.normalAnimation();
    }
    else if (me.hp === 3) {
        me.damageAnimation();
    }

    if (me.hp === 0) {
        me.explodeAnimation();
    }

    AEnemy.prototype.onFrame.apply(this, arguments);//call base onFrame
};

Enemy3.prototype.normalAnimation = function () {
    var me = this;
    if (Date.now() - me.lastAnimation > 0.5 * 1000) {
        if (me.sPosition.y === 0) {
            me.sPosition.y = me.sHeight;
        }
        else {
            me.sPosition.y = 0;
        }
        me.lastAnimation = Date.now();
    }
};

Enemy3.prototype.damageAnimation = function () {
    var me = this;
    me.sPosition.y = me.sHeight * 2;
};

Enemy3.prototype.explodeAnimation = function () {
    var me = this;
    if (me.sPosition.x === 0) {
        dataBus.sound.play("enemy2down");
        me.image = dataBus.resource.get("enemy3explode").entity;
        me.sPosition = {
            x: 0,
            y: 0
        };
    }

    if (Date.now() - me.lastAnimation > 0.1 * 1000) {
        if (me.sPosition.x === me.explodeAnimationTotal * me.sWidth) {
            me.onExplode();
            return;
        }
        me.sPosition.x += me.sWidth;
        me.lastAnimation = Date.now();
    }
};

Enemy3.prototype.onExplode = function () {
    var me = this;
    me.dispatchEvent("explode");
    dataBus.remove(me);
};
var APowerUp = function () {
    AModel.apply(this, arguments);
    this.status = "showdown";
};

APowerUp.prototype = Object.create(AModel.prototype);

APowerUp.prototype.playAnimation = function () {
    if (this.status === "showdown" || this.status === "showup") {
        this.showAnimation();
    }
    else {
        this.downAnimation();
    }
};

APowerUp.prototype.showAnimation = function () {
    if (this.status === "showdown") {
        this.position.y += 5;
        if (this.position.y >= this.height * 3) {
            this.status = "showup";
        }
    }
    else if (this.status === "showup") {
        this.position.y -= 5;
        if (this.position.y + this.height < 0) {
            this.status = "down";
        }
    }
};

APowerUp.prototype.downAnimation = function () {
    this.position.y += 10;
    if (this.position.y > 1136) {
        dataBus.remove(this);
    }
};
/**
 * @author:zhy
 * @date:20180212
 */
var Bomb = function () {
    APowerUp.apply(this, arguments);
    var me = this;
    me.image = dataBus.resource.get("bomb").entity;
    me.width = 76 * dataBus.scale;
    me.height = 136 * dataBus.scale;
    me.sWidth = 76;
    me.sHeight = 136;
};

Bomb.prototype = Object.create(APowerUp.prototype);

Bomb.prototype.onFrame = function () {
    APowerUp.prototype.playAnimation.apply(this, arguments);
};
/**
 * @author:zhy
 * @date:20180212
 */
var DoubleLaser = function () {
    APowerUp.apply(this, arguments);
    var me = this;
    me.image = dataBus.resource.get("doubleLaser").entity;
    me.width = 73 * dataBus.scale;
    me.height = 114 * dataBus.scale;
    me.sWidth = 73;
    me.sHeight = 114;
};

DoubleLaser.prototype = Object.create(APowerUp.prototype);

DoubleLaser.prototype.onFrame = function () {
    APowerUp.prototype.playAnimation.apply(this, arguments);
};
/**
 * @author:zhy
 * @date:20171108
 */

var Level1 = function (options) {
    this.enemyTypes = [
        Enemy1
    ];
    this.count = 0;
    this.width = options.width;
    this.height = options.height;
};

/**
* @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random
* @func getRandomArbitrary
* @param {number} min 
* @param {number} max 
*/
Level1.prototype.getRandomArbitrary = function (min, max) {
    return Math.random() * (max - min) + min;
};

Level1.prototype.generate = function (timestamp) {
    var me = this;
    if (++me.count === 40) {
        me.count = 0;
        var e = null;
        var r = parseInt(me.getRandomArbitrary(1, 5));
        if (r === 1) {
            e = new Enemy1();
        }
        else if (r === 2) {
            e = new Enemy2();
        }
        else if (r === 3) {
            e = new Enemy3();
        }
        else if (r === 4) {
            var r2 = parseInt(me.getRandomArbitrary(1, 5));
            if (r2 === 2) {
                e = new DoubleLaser();
            }
            else if (r2 === 4) {
                e = new Bomb();
            }
            else {
                return null;
            }
        }

        e.position.x = me.getRandomArbitrary(0, me.width - e.width);
        e.position.y = -e.height;


        if (me.isEgdeCollision(e)) return null;
        return e;
    }
    return null;
};

Level1.prototype.isEgdeCollision = function (e) {
    var me = this;
    for (var i = 0, item; item = dataBus.list[i]; i++) {
        if (item.isEgdeCollision(item, e) && item instanceof AEnemy) return true;
    }
    return false;
};
var NumberText = function () {
    AModel.apply(this, arguments);
    var me = this;
    me.image = dataBus.resource.get("number").entity;
    me.number = 0;
    me.width = 24;
    me.height = 30;
    me.sWidth = 40
    me.sHeight = 50;

    me.addEventListener("frame",function(evt){
        me.sPosition.x = me.sWidth * me.number;
    });
};

NumberText.prototype = Object.create(AModel.prototype);
var Text = function (options) {
    AModel.apply(this, arguments);
    var me = this;
    me.image = dataBus.resource.get("common").entity;
    me.width = 0;
    me.height = 0;
    me.sWidth = 1;
    me.sHeight = 1;
    me.sPosition = {
        x: 201,
        y: 201
    };
};
Text.prototype = Object.create(AModel.prototype);

Text.prototype.onAfterFrame = function (evt) {
    var me = this;
    var ctx = evt.target.context;
    ctx.save();
    ctx.font = me.fontSize + "px Arial";
    ctx.fillText(me.text, me.position.x , me.position.y);
    ctx.restore();
};
var BombButton = function (options) {
    AModel.apply(this, arguments);
    var me = this;
    me.image = dataBus.resource.get("bombButton").entity;
    me.width = 82 * dataBus.scale;
    me.height = 68 * dataBus.scale;
    me.sWidth = 82;
    me.sHeight = 68;
};

BombButton.prototype = Object.create(AModel.prototype);
var Cross = function (options) {
    AModel.apply(this, arguments);
    var me = this;
    me.image = dataBus.resource.get("cross").entity;
    me.width = 51 * dataBus.scale;
    me.height = 54 * dataBus.scale;
    me.sWidth = 51;
    me.sHeight = 54;
};

Cross.prototype = Object.create(AModel.prototype);
﻿/**
 * @author : ReversalMinute
 * @mail   : mailzy@vip.qq.com
 * @date   :20160324
 */

/**
 * @class  KeyboardListener
 * @returns {keyboard} 
 */
function KeyboardListener() {
    var me = this;

    me.keys = {
        Backspace: false,//8 Backspace
        Tab: false,//9 Tab
        Numpad5Center: false,//12 Numpad5
        NumpadEnter: false,//13 NumpadEnter
        Enter: false,//13 Enter
        ShiftLeft: false,//16 ShiftLeft
        ShiftRight: false,//16 ShiftRight
        ControlLeft: false,//17 ControlLeft
        ControlRight: false,//17 ControlRight
        AltLeft: false,//18 AltLeft
        AltRight: false,//18 AltRight
        Pause: false,//19 Pause
        CapsLock: false,//20 CapsLock
        Escape: false,//27 Escape
        Space: false,//32 Space
        Numpad9PageUp: false,//33 Numpad9
        PageUp: false,//33 PageUp
        PageDown: false,//34 PageDown
        Numpad3PageDown: false,//34 Numpad3
        Numpad1End: false,//35 Numpad1
        End: false,//35 End
        Home: false,//36 Home
        Numpad7Home: false,//36 Numpad7
        ArrowLeft: false,//37 ArrowLeft
        Numpad4ArrowLeft: false,//37 Numpad4
        ArrowUp: false,//38 ArrowUp
        Numpad8ArrowUp: false,//38 Numpad8
        ArrowRight: false,//39 ArrowRight
        Numpad6ArrowRight: false,//39 Numpad6
        ArrowDown: false,//40 ArrowDown
        Numpad2ArrowDown: false,//40 Numpad2
        Insert: false,//45 Insert
        Numpad0Insert: false,//45 Numpad0
        Delete: false,//46 Delete
        NumpadDecimalDelete: false,//46 NumpadDecimal
        Digit0: false,//48 Digit0
        Digit1: false,//49 Digit1
        Digit2: false,//50 Digit2
        Digit3: false,//51 Digit3
        Digit4: false,//52 Digit4
        Digit5: false,//53 Digit5
        Digit6: false,//54 Digit6
        Digit7: false,//55 Digit7
        Digit8: false,//56 Digit8
        Digit9: false,//57 Digit9
        KeyA: false,//65 KeyA
        KeyB: false,//66 KeyB
        KeyC: false,//67 KeyC
        KeyD: false,//68 KeyD
        KeyE: false,//69 KeyE
        KeyF: false,//70 KeyF
        KeyG: false,//71 KeyG
        KeyH: false,//72 KeyH
        KeyI: false,//73 KeyI
        KeyJ: false,//74 KeyJ
        KeyK: false,//75 KeyK
        KeyL: false,//76 KeyL
        KeyM: false,//77 KeyM
        KeyN: false,//78 KeyN
        KeyO: false,//79 KeyO
        KeyP: false,//80 KeyP
        KeyQ: false,//81 KeyQ
        KeyR: false,//82 KeyR
        KeyS: false,//83 KeyS
        KeyT: false,//84 KeyT
        KeyU: false,//85 KeyU
        KeyV: false,//86 KeyV
        KeyW: false,//87 KeyW
        KeyX: false,//88 KeyX
        KeyY: false,//89 KeyY
        KeyZ: false,//90 KeyZ
        OSLeft: false,//91 OSLeft
        ContextMenu: false,//93 ContextMenu
        Numpad0: false,//96 Numpad0
        Numpad1: false,//97 Numpad1
        Numpad2: false,//98 Numpad2
        Numpad3: false,//99 Numpad3
        Numpad4: false,//100 Numpad4
        Numpad5: false,//101 Numpad5
        Numpad6: false,//102 Numpad6
        Numpad7: false,//103 Numpad7
        Numpad8: false,//104 Numpad8
        Numpad9: false,//105 Numpad9
        NumpadMultiply: false,//106 NumpadMultiply
        NumpadAdd: false,//107 NumpadAdd
        NumpadSubtract: false,//109 NumpadSubtract
        NumpadDecimal: false,//110 NumpadDecimal
        NumpadDivide: false,//111 NumpadDivide
        F1: false,//112 F1
        F2: false,//113 F2
        F3: false,//114 F3
        F4: false,//115 F4
        F5: false,//116 F5
        F6: false,//117 F6
        F7: false,//118 F7
        F8: false,//119 F8
        F9: false,//120 F9
        F10: false,//121 F10
        F11: false,//122 F11
        F12: false,//123 F12
        NumLock: false,//144 NumLock
        ScrollLock: false,//145 ScrollLock
        Semicolon: false,//186 Semicolon
        Equal: false,//187 Equal
        Comma: false,//188 Comma
        Minus: false,//189 Minus
        Period: false,//190 Period
        Slash: false,//191 Slash
        Backquote: false,//192 Backquote
        BracketLeft: false,//219 BracketLeft
        Backslash: false,//220 Backslash
        BracketRight: false,//221 BracketRight
        Quote: false//222 Quote
    };

    window.addEventListener("keydown", function (e) {
        e.preventDefault();
        me.setKeyStatus(e, true);
    });
    window.addEventListener("keyup", function (e) {
        me.setKeyStatus(e, false);
    });
    return me.keys;
};

/**
 * @method setKeyStatus
 * @param {KeyboardEvent} keyboardEvent 
 * @param {Bool} isKeyDown 
 * @returns {void} 
 */
KeyboardListener.prototype.setKeyStatus = function (keyboardEvent, isKeyDown) {
    var keys = this.keys;
    //Backspace
    if (keyboardEvent.keyCode === 8) { keys.Backspace = isKeyDown; }
    //Tab
    else if (keyboardEvent.keyCode === 9) { keys.Tab = isKeyDown; }
    //Numpad5Center
    else if (keyboardEvent.keyCode === 12 && keyboardEvent.location === KeyboardEvent.DOM_KEY_LOCATION_NUMPAD) { keys.Numpad5Center = isKeyDown; }
    //NumpadEnter
    else if (keyboardEvent.keyCode === 13 && keyboardEvent.location === KeyboardEvent.DOM_KEY_LOCATION_NUMPAD) { keys.NumpadEnter = isKeyDown; }
    //Enter
    else if (keyboardEvent.keyCode === 13) { keys.Enter = isKeyDown; }
    //ShiftLeft
    else if (keyboardEvent.keyCode === 16) { keys.ShiftLeft = isKeyDown; }
    //ShiftRight
    else if (keyboardEvent.keyCode === 16) { keys.ShiftRight = isKeyDown; }
    //ControlLeft
    else if (keyboardEvent.keyCode === 17) { keys.ControlLeft = isKeyDown; }
    //ControlRight
    else if (keyboardEvent.keyCode === 17) { keys.ControlRight = isKeyDown; }
    //AltLeft
    else if (keyboardEvent.keyCode === 18) { keys.AltLeft = isKeyDown; }
    //AltRight
    else if (keyboardEvent.keyCode === 18) { keys.AltRight = isKeyDown; }
    //Pause
    else if (keyboardEvent.keyCode === 19) { keys.Pause = isKeyDown; }
    //CapsLock
    else if (keyboardEvent.keyCode === 20) { keys.CapsLock = isKeyDown; }
    //Escape
    else if (keyboardEvent.keyCode === 27) { keys.Escape = isKeyDown; }
    //Space
    else if (keyboardEvent.keyCode === 32) { keys.Space = isKeyDown; }
    //Numpad9PageUp
    else if (keyboardEvent.keyCode === 33 && keyboardEvent.location === KeyboardEvent.DOM_KEY_LOCATION_NUMPAD) { keys.Numpad9PageUp = isKeyDown; }
    //PageUp
    else if (keyboardEvent.keyCode === 33) { keys.PageUp = isKeyDown; }
    //PageDown
    else if (keyboardEvent.keyCode === 34) { keys.PageDown = isKeyDown; }
    //Numpad3PageDown
    else if (keyboardEvent.keyCode === 34 && keyboardEvent.location === KeyboardEvent.DOM_KEY_LOCATION_NUMPAD) { keys.Numpad3PageDown = isKeyDown; }
    //Numpad1End
    else if (keyboardEvent.keyCode === 35 && keyboardEvent.location === KeyboardEvent.DOM_KEY_LOCATION_NUMPAD) { keys.Numpad1End = isKeyDown; }
    //End
    else if (keyboardEvent.keyCode === 35) { keys.End = isKeyDown; }
    //Home
    else if (keyboardEvent.keyCode === 36) { keys.Home = isKeyDown; }
    //Numpad7Home
    else if (keyboardEvent.keyCode === 36 && keyboardEvent.location === KeyboardEvent.DOM_KEY_LOCATION_NUMPAD) { keys.Numpad7Home = isKeyDown; }
    //ArrowLeft
    else if (keyboardEvent.keyCode === 37) { keys.ArrowLeft = isKeyDown; }
    //Numpad4ArrowLeft
    else if (keyboardEvent.keyCode === 37) { keys.Numpad4ArrowLeft = isKeyDown; }
    //ArrowUp
    else if (keyboardEvent.keyCode === 38) { keys.ArrowUp = isKeyDown; }
    //Numpad8ArrowUp
    else if (keyboardEvent.keyCode === 38) { keys.Numpad8ArrowUp = isKeyDown; }
    //ArrowRight
    else if (keyboardEvent.keyCode === 39) { keys.ArrowRight = isKeyDown; }
    //Numpad6ArrowRight
    else if (keyboardEvent.keyCode === 39) { keys.Numpad6ArrowRight = isKeyDown; }
    //ArrowDown
    else if (keyboardEvent.keyCode === 40) { keys.ArrowDown = isKeyDown; }
    //Numpad2ArrowDown
    else if (keyboardEvent.keyCode === 40) { keys.Numpad2ArrowDown = isKeyDown; }
    //Insert
    else if (keyboardEvent.keyCode === 45) { keys.Insert = isKeyDown; }
    //Numpad0Insert
    else if (keyboardEvent.keyCode === 45) { keys.Numpad0Insert = isKeyDown; }
    //Delete
    else if (keyboardEvent.keyCode === 46) { keys.Delete = isKeyDown; }
    //NumpadDecimalDelete
    else if (keyboardEvent.keyCode === 46) { keys.NumpadDecimalDelete = isKeyDown; }
    //Digit0
    else if (keyboardEvent.keyCode === 48) { keys.Digit0 = isKeyDown; }
    //Digit1
    else if (keyboardEvent.keyCode === 49) { keys.Digit1 = isKeyDown; }
    //Digit2
    else if (keyboardEvent.keyCode === 50) { keys.Digit2 = isKeyDown; }
    //Digit3
    else if (keyboardEvent.keyCode === 51) { keys.Digit3 = isKeyDown; }
    //Digit4
    else if (keyboardEvent.keyCode === 52) { keys.Digit4 = isKeyDown; }
    //Digit5
    else if (keyboardEvent.keyCode === 53) { keys.Digit5 = isKeyDown; }
    //Digit6
    else if (keyboardEvent.keyCode === 54) { keys.Digit6 = isKeyDown; }
    //Digit7
    else if (keyboardEvent.keyCode === 55) { keys.Digit7 = isKeyDown; }
    //Digit8
    else if (keyboardEvent.keyCode === 56) { keys.Digit8 = isKeyDown; }
    //Digit9
    else if (keyboardEvent.keyCode === 57) { keys.Digit9 = isKeyDown; }
    //KeyA
    else if (keyboardEvent.keyCode === 65) { keys.KeyA = isKeyDown; }
    //KeyB
    else if (keyboardEvent.keyCode === 66) { keys.KeyB = isKeyDown; }
    //KeyC
    else if (keyboardEvent.keyCode === 67) { keys.KeyC = isKeyDown; }
    //KeyD
    else if (keyboardEvent.keyCode === 68) { keys.KeyD = isKeyDown; }
    //KeyE
    else if (keyboardEvent.keyCode === 69) { keys.KeyE = isKeyDown; }
    //KeyF
    else if (keyboardEvent.keyCode === 70) { keys.KeyF = isKeyDown; }
    //KeyG
    else if (keyboardEvent.keyCode === 71) { keys.KeyG = isKeyDown; }
    //KeyH
    else if (keyboardEvent.keyCode === 72) { keys.KeyH = isKeyDown; }
    //KeyI
    else if (keyboardEvent.keyCode === 73) { keys.KeyI = isKeyDown; }
    //KeyJ
    else if (keyboardEvent.keyCode === 74) { keys.KeyJ = isKeyDown; }
    //KeyK
    else if (keyboardEvent.keyCode === 75) { keys.KeyK = isKeyDown; }
    //KeyL
    else if (keyboardEvent.keyCode === 76) { keys.KeyL = isKeyDown; }
    //KeyM
    else if (keyboardEvent.keyCode === 77) { keys.KeyM = isKeyDown; }
    //KeyN
    else if (keyboardEvent.keyCode === 78) { keys.KeyN = isKeyDown; }
    //KeyO
    else if (keyboardEvent.keyCode === 79) { keys.KeyO = isKeyDown; }
    //KeyP
    else if (keyboardEvent.keyCode === 80) { keys.KeyP = isKeyDown; }
    //KeyQ
    else if (keyboardEvent.keyCode === 81) { keys.KeyQ = isKeyDown; }
    //KeyR
    else if (keyboardEvent.keyCode === 82) { keys.KeyR = isKeyDown; }
    //KeyS
    else if (keyboardEvent.keyCode === 83) { keys.KeyS = isKeyDown; }
    //KeyT
    else if (keyboardEvent.keyCode === 84) { keys.KeyT = isKeyDown; }
    //KeyU
    else if (keyboardEvent.keyCode === 85) { keys.KeyU = isKeyDown; }
    //KeyV
    else if (keyboardEvent.keyCode === 86) { keys.KeyV = isKeyDown; }
    //KeyW
    else if (keyboardEvent.keyCode === 87) { keys.KeyW = isKeyDown; }
    //KeyX
    else if (keyboardEvent.keyCode === 88) { keys.KeyX = isKeyDown; }
    //KeyY
    else if (keyboardEvent.keyCode === 89) { keys.KeyY = isKeyDown; }
    //KeyZ
    else if (keyboardEvent.keyCode === 90) { keys.KeyZ = isKeyDown; }
    //OSLeft
    else if (keyboardEvent.keyCode === 91) { keys.OSLeft = isKeyDown; }
    //ContextMenu
    else if (keyboardEvent.keyCode === 93) { keys.ContextMenu = isKeyDown; }
    //Numpad0
    else if (keyboardEvent.keyCode === 96) { keys.Numpad0 = isKeyDown; }
    //Numpad1
    else if (keyboardEvent.keyCode === 97) { keys.Numpad1 = isKeyDown; }
    //Numpad2
    else if (keyboardEvent.keyCode === 98) { keys.Numpad2 = isKeyDown; }
    //Numpad3
    else if (keyboardEvent.keyCode === 99) { keys.Numpad3 = isKeyDown; }
    //Numpad4
    else if (keyboardEvent.keyCode === 100) { keys.Numpad4 = isKeyDown; }
    //Numpad5
    else if (keyboardEvent.keyCode === 101) { keys.Numpad5 = isKeyDown; }
    //Numpad6
    else if (keyboardEvent.keyCode === 102) { keys.Numpad6 = isKeyDown; }
    //Numpad7
    else if (keyboardEvent.keyCode === 103) { keys.Numpad7 = isKeyDown; }
    //Numpad8
    else if (keyboardEvent.keyCode === 104) { keys.Numpad8 = isKeyDown; }
    //Numpad9
    else if (keyboardEvent.keyCode === 105) { keys.Numpad9 = isKeyDown; }
    //NumpadMultiply
    else if (keyboardEvent.keyCode === 106) { keys.NumpadMultiply = isKeyDown; }
    //NumpadAdd
    else if (keyboardEvent.keyCode === 107) { keys.NumpadAdd = isKeyDown; }
    //NumpadSubtract
    else if (keyboardEvent.keyCode === 109) { keys.NumpadSubtract = isKeyDown; }
    //NumpadDecimal
    else if (keyboardEvent.keyCode === 110) { keys.NumpadDecimal = isKeyDown; }
    //NumpadDivide
    else if (keyboardEvent.keyCode === 111) { keys.NumpadDivide = isKeyDown; }
    //F1
    else if (keyboardEvent.keyCode === 112) { keys.F1 = isKeyDown; }
    //F2
    else if (keyboardEvent.keyCode === 113) { keys.F2 = isKeyDown; }
    //F3
    else if (keyboardEvent.keyCode === 114) { keys.F3 = isKeyDown; }
    //F4
    else if (keyboardEvent.keyCode === 115) { keys.F4 = isKeyDown; }
    //F5
    else if (keyboardEvent.keyCode === 116) { keys.F5 = isKeyDown; }
    //F6
    else if (keyboardEvent.keyCode === 117) { keys.F6 = isKeyDown; }
    //F7
    else if (keyboardEvent.keyCode === 118) { keys.F7 = isKeyDown; }
    //F8
    else if (keyboardEvent.keyCode === 119) { keys.F8 = isKeyDown; }
    //F9
    else if (keyboardEvent.keyCode === 120) { keys.F9 = isKeyDown; }
    //F10
    else if (keyboardEvent.keyCode === 121) { keys.F10 = isKeyDown; }
    //F11
    else if (keyboardEvent.keyCode === 122) { keys.F11 = isKeyDown; }
    //F12
    else if (keyboardEvent.keyCode === 123) { keys.F12 = isKeyDown; }
    //NumLock
    else if (keyboardEvent.keyCode === 144) { keys.NumLock = isKeyDown; }
    //ScrollLock
    else if (keyboardEvent.keyCode === 145) { keys.ScrollLock = isKeyDown; }
    //Semicolon
    else if (keyboardEvent.keyCode === 186) { keys.Semicolon = isKeyDown; }
    //Equal
    else if (keyboardEvent.keyCode === 187) { keys.Equal = isKeyDown; }
    //Comma
    else if (keyboardEvent.keyCode === 188) { keys.Comma = isKeyDown; }
    //Minus
    else if (keyboardEvent.keyCode === 189) { keys.Minus = isKeyDown; }
    //Period
    else if (keyboardEvent.keyCode === 190) { keys.Period = isKeyDown; }
    //Slash
    else if (keyboardEvent.keyCode === 191) { keys.Slash = isKeyDown; }
    //Backquote
    else if (keyboardEvent.keyCode === 192) { keys.Backquote = isKeyDown; }
    //BracketLeft
    else if (keyboardEvent.keyCode === 219) { keys.BracketLeft = isKeyDown; }
    //Backslash
    else if (keyboardEvent.keyCode === 220) { keys.Backslash = isKeyDown; }
    //BracketRight
    else if (keyboardEvent.keyCode === 221) { keys.BracketRight = isKeyDown; }
    //Quote
    else if (keyboardEvent.keyCode === 222) { keys.Quote = isKeyDown; }
};

﻿/**
 * @author    : ReversalMinute
 * @mail      : mailzy@vip.qq.com
 * @datetime  : 20160324
 */

/**
 * @class MouseListener
 * @returns {mouse} 
 */
function MouseListener() {
    var me = this;
    me.mouse = {
        Left: false,
        LeftDownPosition: { X: 0, Y: 0 },
        Middle: false,
        MiddleDownPosition: { X: 0, Y: 0 },
        Right: false,
        RightDownPosition: { X: 0, Y: 0 },
        Wheel: 0,
        X: 0,
        Y: 0
    };

    window.addEventListener("mousedown", function (mouseEvent) {
        mouseEvent.preventDefault();
        me.setMouseStatus(mouseEvent, true);
    });
    window.addEventListener("mouseup", function (mouseEvent) {
        mouseEvent.preventDefault();
        me.setMouseStatus(mouseEvent, false);
    });
    window.addEventListener("mousemove", function (mouseEvent) {
        mouseEvent.preventDefault();
        me.mouse.X = mouseEvent.clientX;
        me.mouse.Y = mouseEvent.clientY;
    });
    window.addEventListener("mousewheel", function (mouseEvent) {
        mouseEvent.preventDefault();
        me.mouse.Wheel += mouseEvent.wheelDelta;
    });
    return me.mouse;
}

MouseListener.prototype.setMouseStatus = function (mouseEvent, isButtonDown) {
    var me = this;
    var mouse = me.mouse;
    switch (mouseEvent.which) {
        case 1:
            mouse.Left = isButtonDown;
            if (mouse.Left) {
                mouse.LeftDownPosition.X = mouseEvent.clientX;
                mouse.LeftDownPosition.Y = mouseEvent.clientY;
            }
            else {
                mouse.LeftDownPosition.X = 0;
                mouse.LeftDownPosition.Y = 0;
            }
            break;
        case 2:
            mouse.Middle = isButtonDown;
            if (mouse.Middle) {
                mouse.MiddleDownPosition.X = mouseEvent.clientX;
                mouse.MiddleDownPosition.Y = mouseEvent.clientY;
            }
            else {
                mouse.MiddleDownPosition.X = 0;
                mouse.MiddleDownPosition.Y = 0;
            }
            break;
        case 3:
            mouse.Right = isButtonDown;
            if (mouse.Right) {
                mouse.RightDownPosition.X = mouseEvent.clientX;
                mouse.RightDownPosition.Y = mouseEvent.clientY;
            }
            else {
                mouse.RightDownPosition.X = 0;
                mouse.RightDownPosition.Y = 0;
            }
            break;
        default:
    }
};
﻿/**
 * @author : ReversalMinute
 * @mail   : mailzy@vip.qq.com
 * @date   : 20180108
 * @docs   : https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent
 */

/**
 * @class TouchListener
 * @returns {touch} 
 */
var TouchListener = function (obj) {
    var me = this;
    me.list = [];

    obj.addEventListener("touchstart", function (evt) {
        evt.preventDefault();
        for (var i = 0, item; item = evt.changedTouches[i]; i++) {
            if (me.find(item.identifier) === null) {
                me.list.push({
                    x: item.pageX,
                    y: item.pageY,
                    identifier: item.identifier
                });
            }
        }
    });

    obj.addEventListener("touchmove", function (evt) {
        evt.preventDefault();
        for (var i = 0, item; item = evt.changedTouches[i]; i++) {
            var p = me.find(item.identifier);
            if (p) {
                p.x = item.pageX;
                p.y = item.pageY;
            }
        }
    });

    obj.addEventListener("touchend", function (evt) {
        evt.preventDefault();

        for (var i = 0, item; item = evt.changedTouches[i]; i++) {
            var storedTouch = me.find(item.identifier);
            if (storedTouch) {
                var idx = me.list.indexOf(storedTouch);
                me.list.splice(idx, 1);
            }
        }
    });

    obj.addEventListener("touchcancel", function (evt) {
        evt.preventDefault();
        for (var i = 0, item; item = evt.changedTouches[i]; i++) {
            var storedTouch = me.find(item.identifier);
            if (storedTouch) {
                var idx = list.indexOf(storedTouch);
                me.list.splice(idx, 1);
            }
        }
    });
};


TouchListener.prototype.find = function (identifier) {
    var me = this;
    for (var i = 0, item; item = me.list[i]; i++) {
        if (item.identifier === identifier) return item;
    }
    return null;
};
/**
 * @author   : zhy
 * @datetime : 20171108
 * @file     : game.js
 * @link     : https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeRect
 */

/**
 * @constructor
 * @param {object} options
 */
var Game = function (options) {
    var me = this;
    me.isPause = false;
    me.isDrawBox = false;
    me.showFps = false;
    me.keyboard = null;
    me.mouse = null;
    me.touch = null;
    me.sound = dataBus.sound;
    me.resource = dataBus.resource;
    me.player1 = null;
    me.player2 = null;
    me.resources = null;
    me.canvas = options.canvas ? options.canvas : me.createCanvas(options.width, options.height);
    me.context = me.canvas.getContext("2d");
    me.map = new Level1({ width: options.width, height: options.height });
    me.width = options.width;
    me.height = options.height;
    me.lastTime = Date.now();
    me.frameCount = 0;
    me.fps = 0;
    me.score = 0;
    me.scoreList = [];
    me.bombList = [];
    me.timer = null;
    me.fixSound = false;

    dataBus.scale = me.width / 1136 < 0.5 ? 0.5 : me.width / 1136;

    if (options) {
        if (options.keyboard) me.keyboard = options.keyboard;
        if (options.mouse) me.mouse = options.mouse;
        if (options.touch) me.touch = options.touch;
    }

    me.canvas.addEventListener("click", function (evt) {
        me.dispatchClick({ x: me.mouse.X, y: me.mouse.Y });
    });
    me.canvas.addEventListener("touchend", function (evt) {
        var t = evt.changedTouches[0];
        if (t) me.dispatchClick({ x: t.clientX, y: t.clientY });
    });

    me.resource.addEventListener("complete", function (evt) {
        dataBus.sound.loadList(dataBus.resource.list);
        me.touchToStart();
    });
    me.resource.loadAll();
};

Game.prototype.dispatchClick = function (p) {
    var me = this;
    for (var i = 0, item; item = dataBus.list[i]; i++) {
        if (p.x >= item.position.x &&
            p.x <= item.position.x + item.width &&
            p.y >= item.position.y &&
            p.y <= item.position.y + item.height
        ) {
            item.dispatchEvent("click", p);
        }
    }
};

Game.prototype.touchToStart = function () {
    var me = this;
    var f = new Face();
    f.width = me.width;
    f.height = me.width / 640 * 1136;

    var btn = new Button();
    btn.text = "开始游戏";
    btn.width = me.width / 4;
    btn.height = 20 / 80 * me.width / 4;
    btn.addEventListener("click", function () {
        if (!me.fixSound) {
            dataBus.sound.fixIOSCantPlay();
            me.fixSound = true;
        }
        me.start();
    });

    btn.position.x = (me.width - btn.width) / 2;
    btn.position.y = (me.height - btn.height - me.height / 20);

    dataBus.add(f);
    dataBus.add(btn);
    me.draw();
};

/**
 * Game Over Dialog
 */
Game.prototype.gameover = function () {
    var me = this;
    var d = new Dialog();
    d.position.x = (me.width - d.width) / 2;
    d.position.y = (me.height - d.height) / 2;

    var btn = new Button();
    btn.text = "重新开始";
    btn.position.x = d.position.x + (d.width - btn.width) / 2;
    btn.position.y = d.position.y + d.height - btn.height - 10;
    btn.addEventListener("click", function (evt) {
        me.start();
    });

    var txt1 = new Text();
    txt1.text = "飞机大战得分";
    txt1.fontSize = 15;
    txt1.position.x = d.position.x + (d.width - txt1.text.length * txt1.fontSize) / 2;
    txt1.position.y = d.position.y + 23;



    var txt2 = new Text();
    txt2.text = me.score.toString();
    txt2.fontSize = 20;
    txt2.position.x = d.position.x + (d.width - txt2.text.length * txt2.fontSize) / 2 + 5;
    txt2.position.y = d.position.y + 100;

    dataBus.add(d);
    dataBus.add(btn);
    dataBus.add(txt1);
    dataBus.add(txt2);
};

/**
 * start Game
 */
Game.prototype.start = function () {
    var me = this;
    //try {
    dataBus.list = [];
    me.scoreList = [];
    me.bombList = [];
    me.score = 0;
    me.bombs = 0;
    me.addBackground();
    me.addScore();
    me.addPlayer1();
    me.addBombButton();
    me.sound.play("bgm", true);

    if (!me.timer) me.loop(); else me.isPause = false;
    //    }
    //    catch (ex) {
    //        if (typeof alert !== "undefined") alert(ex.message);
    //        else if (wx && typeof wx.showModal) wx.showModal({ title: "error", content: ex.message });
    //    }
};

Game.prototype.createCanvas = function (width, height) {
    var me = this;
    var canvas = document.createElement("canvas");
    canvas.width = width;
    canvas.height = height;
    document.body.appendChild(canvas);
    return canvas;
};

Game.prototype.loop = function () {
    var me = this;
    var fn = function (timeStamp) {

        if (me.keyboard.Enter) {
            me.isPause = !me.isPause;
        }

        if (!me.isPause) {
            me.generateEnermy(timeStamp);
            me.keyboardWatch(timeStamp);
            me.touchWatch(timeStamp);
            me.update(timeStamp);
            me.draw(timeStamp);
        }

        if (me.isPause && !me.sound.isPause) me.sound.pause();
        if (!me.isPause && me.sound.isPause) me.sound.continue();

        me.timer = requestAnimationFrame(fn);
    }
    me.timer = requestAnimationFrame(fn);
};

Game.prototype.generateEnermy = function (timeStamp) {
    var me = this;
    var e = me.map.generate(timeStamp);
    if (e) {
        e.addEventListener("explode", function (evt) {
            me.score++;
        });
        dataBus.add(e);
    }
};

Game.prototype.draw = function () {
    var me = this;
    var now = Date.now();
    for (var i = 0, item; item = dataBus.list[i]; i++) {
        if (item.onFrame) {
            item.onFrame({ target: me });
        }

        if (typeof item.getCenter === "undefined") continue;

        var center = item.getCenter();
        me.context.save();
        me.context.translate(center.x, center.y);
        me.context.rotate(item.rotate * Math.PI / 180);
        me.context.translate(-item.width / 2, -item.height / 2);
        me.context.drawImage(
            item.image,
            item.sPosition.x,
            item.sPosition.y,
            item.sWidth,
            item.sHeight,
            0,
            0,
            item.width,
            item.height
        );
        me.context.restore();

        if (me.isDrawBox && !(item instanceof Background)) {
            me.context.save();
            me.context.strokeStyle = "red";
            me.context.strokeRect(item.position.x, item.position.y, item.width, item.height);
            me.context.fillText(item.position.x + "," + item.position.y, item.position.x, item.position.y);
            me.context.restore();
        }
        if (item.onAfterFrame) {
            item.onAfterFrame({ target: me });
        }
    }

    me.drawScore();
    me.drawBomb();

    if (me.showFps) {
        if (now - me.lastTime >= 1000) {
            me.fps = me.frameCount;
            me.lastTime = now;
            me.frameCount = 0;
        }
        ++me.frameCount;
        me.context.save();
        me.context.strokeStyle = "black";
        me.context.fillText("FPS:" + me.fps, me.width - 100, me.height - 20);
        me.context.restore();
    }


};

Game.prototype.drawScore = function () {
    var me = this;
    var num = me.score;
    var i = 0;
    var j = 0;
    if (me.scoreList.length) {
        while (num > 0) {
            i = num % 10;
            me.scoreList[j].number = i;
            num = parseInt(num / 10);
            j++;
        }
    }
};

Game.prototype.drawBomb = function () {
    var me = this;
    if (me.player1 !== null) {
        me.bombList[2].number = me.player1.bombs;
    }
};

Game.prototype.addBombButton = function () {
    var me = this;
    var bb = new BombButton({ position: { x: 0 } });
    bb.position.y = me.height - bb.height;

    var c = new Cross({ position: { x: bb.width } });
    c.position.y = me.height - c.height;

    var n = new NumberText();
    n.position.x = bb.width + c.width;
    n.position.y = me.height - n.height;

    me.bombList.push(bb);
    me.bombList.push(c);
    me.bombList.push(n);

    dataBus.add(bb);
    dataBus.add(c);
    dataBus.add(n);
};

/**
 * 每帧
 */
Game.prototype.update = function (timeStamp) {
    var me = this;
    for (var i = 0, item; item = dataBus.list[i]; i++) {
        item.dispatchEvent("frame", { target: me, timeStamp: timeStamp });
    }
    dataBus.execRemove();
};

Game.prototype.addBackground = function () {
    var me = this;
    var bg1 = new Background({ windowWidth: me.width, windowHeight: me.height });
    var bg2 = new Background({ windowWidth: me.width, windowHeight: me.height });
    bg2.position.y = -bg2.height;

    dataBus.add(bg1);
    dataBus.add(bg2);
};

Game.prototype.addScore = function () {
    var me = this;
    for (var i = 5; i >= 0; i--) {
        var n = new NumberText();
        n.position.x = i * n.width;
        me.scoreList.push(n);
        dataBus.add(n);
    }
};

Game.prototype.addPlayer1 = function () {
    var me = this;
    var plane = new Plane({ scale: me.scale });
    plane.position.x = (me.canvas.width - plane.width) / 2;
    plane.position.y = me.canvas.height - plane.height * (1 + 0.2);

    plane.addEventListener("explode", function (evt) {
        me.gameover();
        me.isPause = true;
        dataBus.sound.pause();
    });

    plane.addEventListener("dropBomb", function (evt) {
        for (var i = 0, item; item = dataBus.list[i]; i++) {
            if (item instanceof AEnemy) {
                item.hp = 0;
                item.explodeAnimation();
            }
        }
    });

    me.player1 = plane;
    dataBus.add(me.player1);
};

Game.prototype.keyboardWatch = function () {
    var me = this;
    var kbd = me.keyboard;
    if (me.player1) {
        var player1 = me.player1;
        if (kbd.KeyW && player1.position.y > 0) player1.position.y -= player1.speed;
        if (kbd.KeyA && player1.position.x > 0) player1.position.x -= player1.speed;
        if (kbd.KeyS && player1.position.y + player1.height < me.height) player1.position.y += player1.speed;
        if (kbd.KeyD && player1.position.x + player1.width < me.width) player1.position.x += player1.speed;
        if (kbd.KeyJ) dataBus.list = dataBus.list.concat(player1.fire());
        if (kbd.KeyK) player1.dropBomb();
    }
};

Game.prototype.touchWatch = function () {
    var me = this;
    var player1 = me.player1;
    var touchPlayer1 = me.findTouchPoint(player1);
    if (touchPlayer1) {
        player1.position.x = touchPlayer1.x - player1.width / 2;
        player1.position.y = touchPlayer1.y - player1.height / 2;
        dataBus.list = dataBus.list.concat(player1.fire());
    }
    var touchBomb = me.findTouchPoint(me.bombList[0]);
    if (touchBomb) {
        player1.dropBomb();
    }
};

Game.prototype.findTouchPoint = function (model) {
    var me = this;
    for (var i = 0, item; item = me.touch.list[i]; i++) {
        if (model.inBox(item)) return item;
    }
    return null;
};

export default {Sound,IEventObject,AEventObject,Resource,DataBus,dataBus,AModel,ABullet,Background,Face,Dialog,Button,Bullet1,Bullet2,Plane,AEnemy,Enemy1,Enemy2,Enemy3,APowerUp,Bomb,DoubleLaser,Level1,NumberText,Text,BombButton,Cross,KeyboardListener,MouseListener,TouchListener,Game}